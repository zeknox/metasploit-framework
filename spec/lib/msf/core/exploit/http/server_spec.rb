
# -*- coding:binary -*-
require 'spec_helper'

require 'msf/core'
require 'msf/core/exploit/http/server'

describe Msf::Exploit::Remote::HttpServer do
	subject(:server_module) do
		mod = Msf::Exploit.allocate
		mod.extend described_class
		mod.send(:initialize, {})

		mod
	end

	let(:mock_service) do
		mock_service = mock("service")
		mock_service.stub(:server_name=)
		mock_service.stub(:add_resource)

		mock_service
	end

	before do
		Rex::ServiceManager.stub(:start => mock_service)
	end

	describe "#add_resource" do
		it "should call the ServiceManager's add_resource" do
			server_module.start_service

			mock_service.should_receive(:add_resource)
			server_module.add_resource('Path' => 'foo')
		end

		it "should re-raise if the resource has already been added" do
			server_module.start_service

			mock_service.should_receive(:add_resource).ordered
			mock_service.should_receive(:add_resource).ordered.and_raise(RuntimeError)

			server_module.add_resource('Path' => 'foo')

			expect { server_module.add_resource('Path' => 'foo') }.to raise_error
		end

	end

	describe "#cleanup" do
		it "should not remove resources if none were successfully added" do
			server_module.should_not_receive(:remove_resource)
			server_module.cleanup
		end

		it "should remove successfully-added resources" do
			# setup
			server_module.start_service
			resources = [ 'a', 'b', 'c' ]
			resources.each { |r| server_module.add_resource('Path' => r) }

			# The service will add one resource as part of #start_service, so
			# add that to the number that we added manually
			server_module.should_receive(:remove_resource).exactly(resources.count + 1).times
			server_module.cleanup
		end

	end

	describe "#hardcoded_uripath" do
		it "should call the ServiceManager's add_resource" do
			server_module.start_service

			mock_service.should_receive(:add_resource)
			server_module.hardcoded_uripath('foo')
		end

		it "should re-raise if the resource has already been added" do
			server_module.start_service

			mock_service.should_receive(:add_resource).ordered.and_raise(RuntimeError)

			expect { server_module.hardcoded_uripath('foo') }.to raise_error
		end
	end

end


